{"componentChunkName":"component---src-templates-blog-post-js","path":"/DataBase/2022-07-01-데이터분석을-위한-SQL레시피-3일차/","result":{"data":{"site":{"siteMetadata":{"title":"3DPIT Study Blog","author":"[KyeongMinPark]","siteUrl":"https://3dpit.github.io","comment":{"disqusShortName":"","utterances":"3dpit/3dpit.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9522ff6b-6902-5092-8162-be1e502e7f0b","excerpt":"2022-07-01-데이터분석을-위한-SQL레시피-3일차 목차 01. 하나의 테이블에 대한 조작 01.1 가로 기반 데이터를 세로 기반으로 변환하기 02. 여러 개의 테이블 조작하기 02.1 여러 개의 테이블을 세로로 결합하기 02.2 여러 개의 테이블을 가로로 정렬하기 02.3 조건 플래그를 0과 1로 표현하기 02.4 계산한 테이블에 이름 붙여 재사용하기 02.5  유사 테이블 만들기 목표범위 : 7강 하나의 테이블에 대한 조작(4.가로기반 데이터를 세로 기반으로 변환하기) ~…","html":"<h2 id=\"2022-07-01-데이터분석을-위한-sql레시피-3일차\" style=\"position:relative;\"><a href=\"#2022-07-01-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D%EC%9D%84-%EC%9C%84%ED%95%9C-sql%EB%A0%88%EC%8B%9C%ED%94%BC-3%EC%9D%BC%EC%B0%A8\" aria-label=\"2022 07 01 데이터분석을 위한 sql레시피 3일차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2022-07-01-데이터분석을-위한-SQL레시피-3일차</h2>\n<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<blockquote>\n<p>01.<code class=\"language-text\">7강</code> 하나의 테이블에 대한 조작</p>\n<blockquote>\n<p>01.1 가로 기반 데이터를 세로 기반으로 변환하기</p>\n</blockquote>\n<p>02.<code class=\"language-text\">8강</code> 여러 개의 테이블 조작하기</p>\n<blockquote>\n<p>02.1 여러 개의 테이블을 세로로 결합하기</p>\n<p>02.2 여러 개의 테이블을 가로로 정렬하기</p>\n<p>02.3 조건 플래그를 0과 1로 표현하기</p>\n<p>02.4 계산한 테이블에 이름 붙여 재사용하기</p>\n<p>02.5  유사 테이블 만들기</p>\n</blockquote>\n</blockquote>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 목표범위 : 7강 하나의 테이블에 대한 조작(4.가로기반 데이터를 세로 기반으로 변환하기) ~ 8강 여러 개의 테이블 조작하기</li>\n</ul>\n<h2 id=\"017강-하나의-테이블에-대한-조작\" style=\"position:relative;\"><a href=\"#017%EA%B0%95-%ED%95%98%EB%82%98%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A1%B0%EC%9E%91\" aria-label=\"017강 하나의 테이블에 대한 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01.7강` 하나의 테이블에 대한 조작</h2>\n<h3 id=\"011-가로-기반-데이터를-세로-기반으로-변환하기\" style=\"position:relative;\"><a href=\"#011-%EA%B0%80%EB%A1%9C-%EA%B8%B0%EB%B0%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%84%B8%EB%A1%9C-%EA%B8%B0%EB%B0%98%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"011 가로 기반 데이터를 세로 기반으로 변환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01.1 가로 기반 데이터를 세로 기반으로 변환하기</h3>\n<ul>\n<li>\n<p>세로 기반 데이터를 가로로 변경하는 것보다</p>\n<ul>\n<li>가로기반 데이터를 세로 기반으로 변환하는 것이 어려운 이유</li>\n<li>이미 데이터가 쉼표로 구분된 열 기반의 형식으로 저장되어서, 이를 분석하기 위해 어쩔 수 없이 변환해야하는경우가 많음</li>\n</ul>\n</li>\n<li>\n<p><strong>열로 표현된 값을 행으로 변환하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 7-12 일련 번호를 가진 피벗 테이블을 사용해 행으로 변환하는 쿼리</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> quarterly_sales qs <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> \n\tq<span class=\"token punctuation\">.</span><span class=\"token keyword\">year</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- Q1 ~ Q4까지의 레이블 이름 출력하기</span>\n\t<span class=\"token keyword\">case</span>\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'q1'</span>\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'q2'</span>\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'q3'</span>\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'q4'</span>\n\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> quarter<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- Q1 ~ Q4까지의 매출 출력하기</span>\n\t<span class=\"token keyword\">case</span>\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">then</span> q<span class=\"token punctuation\">.</span>q1\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">then</span> q<span class=\"token punctuation\">.</span>q2\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token keyword\">then</span> q<span class=\"token punctuation\">.</span>q3\n\t\t<span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">then</span> q<span class=\"token punctuation\">.</span>q4\n\t<span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> sales\n<span class=\"token keyword\">from</span>\n\tquarterly_sales <span class=\"token keyword\">as</span> q\n<span class=\"token keyword\">cross</span> <span class=\"token keyword\">join</span>\n<span class=\"token comment\">-- 행으로 전개하고 싶은 열의 수만큼 순번 테이블 만드리</span>\n<span class=\"token punctuation\">(</span>\n\t\t\t  <span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> idx \n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">select</span> <span class=\"token number\">2</span> <span class=\"token keyword\">as</span> idx\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">select</span> <span class=\"token number\">3</span> <span class=\"token keyword\">as</span> idx\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">select</span> <span class=\"token number\">4</span> <span class=\"token keyword\">as</span> idx\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> p <span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>임의의 길이를 가진 배열을 행으로 전개하기</strong></p>\n<ul>\n<li>테이블 함수란 </li>\n<li>\n<p>리턴값이 테이블인 함수를 의미</p>\n<ul>\n<li>postgreSQL에서는 unnest 함수가 있음</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 7-13 임의의 길이를 가진 배열을 행으로 전개하기</span>\n<span class=\"token keyword\">select</span> unnest<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token string\">'A001'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A002'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A003'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> product_id<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 7-14 테이블 함수를 사용해 쉼표로 구분된 문자열 데이터를 행으로 전개하는 쿼리</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> purchase_log<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> purchase_log <span class=\"token punctuation\">(</span>\n  purchase_id <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">,</span> product_ids <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> purchase_log\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token number\">100001</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A001,A002,A003'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100002</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D001,D002'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100003</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A001'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> \n\tpurchase_id<span class=\"token punctuation\">,</span>\n\tproduct_id\n<span class=\"token keyword\">from</span>\n\tpurchase_log <span class=\"token keyword\">as</span> p\n\t<span class=\"token comment\">-- string_to_array 함수로 문자열을 배열로 변환 후 unnest 함수로 테이블로 변환하기</span>\n\t<span class=\"token keyword\">cross</span> <span class=\"token keyword\">join</span> unnest<span class=\"token punctuation\">(</span>string_to_array<span class=\"token punctuation\">(</span>product_ids<span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> product_id<span class=\"token punctuation\">;</span>\n\t</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 7-15 postgreSQL에서 쉼표로 구분된 데이터를 행으로 전개하는 쿼리</span>\n<span class=\"token keyword\">select</span>\n\tpurchase_id<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- 쉼표로 구분된 문자열을 한 번에 행으로 전개하기</span>\n\tregexp_split_to_table<span class=\"token punctuation\">(</span>product_ids<span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> product_id\n<span class=\"token keyword\">from</span> purchase_log<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>Redshift에서 문자열을 행으로 전개하기</strong></p>\n<ul>\n<li>피벗 테이블을 사용해 문자열을 행으로 전개하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 7-16 일련 번호를 가진 피벗 테이블을 만드는 쿼리</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>\n\t\t\t  <span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> idx \n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">select</span> <span class=\"token number\">2</span> <span class=\"token keyword\">as</span> idx\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">select</span> <span class=\"token number\">3</span> <span class=\"token keyword\">as</span> idx\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> <span class=\"token keyword\">pivot</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 7-17 split_part 함수의 사용 예</span>\n<span class=\"token keyword\">select</span> \n\tsplit_part<span class=\"token punctuation\">(</span><span class=\"token string\">'A001,A002,A003'</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> part_1<span class=\"token punctuation\">,</span>\n\tsplit_part<span class=\"token punctuation\">(</span><span class=\"token string\">'A001,A002,A003'</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> part_2<span class=\"token punctuation\">,</span>\n\tsplit_part<span class=\"token punctuation\">(</span><span class=\"token string\">'A001,A002,A003'</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> part_3\n<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>split_part 함수는</p>\n<ul>\n<li>문자열을 쉼표 등의 구분자로 분할해 n번째 요소를 추출하는 함수</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 7-18 문자 수의 차이를 사용해 상품 수를 계산하는 쿼리</span>\n<span class=\"token keyword\">select</span>\n\tpurchase_id<span class=\"token punctuation\">,</span>\n\tproduct_ids<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- 상품 ID 문자열을 기반으로 쉼표를 제거하고,</span>\n\t<span class=\"token comment\">-- 문자 수의 차이를 계산해서 상품 수 구하기</span>\n\t<span class=\"token number\">1</span> <span class=\"token operator\">+</span> char_length<span class=\"token punctuation\">(</span>product_ids<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">-</span> char_length<span class=\"token punctuation\">(</span><span class=\"token keyword\">replace</span><span class=\"token punctuation\">(</span>product_ids<span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">as</span> product_num\n<span class=\"token keyword\">from</span> \n\tpurchase_log<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>replace를 이용하여 쉼표 제거,</li>\n<li>문자 수를 세는 char_length 함수로 원래 문자열과의 차이를 계산하여 상품수 계산</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 7-19 피벗 테이블을 사용해 문자열을 행으로 전개하는 쿼리</span>\n<span class=\"token keyword\">select</span>\n\tl<span class=\"token punctuation\">.</span>purchase_id<span class=\"token punctuation\">,</span>\n\tl<span class=\"token punctuation\">.</span>product_ids<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- 상품 수만큼 순번 붙이기</span>\n\tp<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- 문자열을 쉼표로 구분해서 분할하고, idx번째 요소 추출하기</span>\n\tsplit_part<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>product_ids<span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> product_id\n<span class=\"token keyword\">from</span>\n\tpurchase_log <span class=\"token keyword\">as</span> l\n\t<span class=\"token keyword\">join</span>\n\t\t<span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> idx\n\t\t <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\t<span class=\"token keyword\">select</span> <span class=\"token number\">2</span> <span class=\"token keyword\">as</span> idx\n\t\t <span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\t<span class=\"token keyword\">select</span> <span class=\"token number\">3</span> <span class=\"token keyword\">as</span> idx\n\t\t<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> p\n\t<span class=\"token comment\">-- 피벗 테이블의 id가 상품 수 이하의 경우 결합하기</span>\n\t<span class=\"token keyword\">on</span> p<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">&lt;=</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> char_length<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>product_ids<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">-</span> char_length<span class=\"token punctuation\">(</span><span class=\"token keyword\">replace</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>product_ids<span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"02code-classlanguage-text8강code-여러-개의-테이블-조작하기\" style=\"position:relative;\"><a href=\"#02code-classlanguage-text8%EA%B0%95code-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A1%B0%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"02code classlanguage text8강code 여러 개의 테이블 조작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02.<code class=\"language-text\">8강</code> 여러 개의 테이블 조작하기</h2>\n<ul>\n<li>\n<p><strong>업무 데이터를 사용하는 경우</strong></p>\n<ul>\n<li>관계형 구조가 아닌경우 여러 개의 테이블에 데이터를 저장함</li>\n<li>이런 데이터를 분석하기 위해 테이블을 하나로 합쳐야하는 경우가 많음</li>\n<li>예를 들어 sns 사이트라면 , 댓글, 좋아요, 팔로우라는 각각의 테이블에 저장된 정보를 기반으로 <code class=\"language-text\">사용자가 어떤 행동을 하는가</code>를 분석하고 싶으면 이런 테이블을 합쳐서 다뤄어야함</li>\n</ul>\n</li>\n<li><strong>로그 데이터를 사용하는 경우</strong></li>\n</ul>\n<h3 id=\"021-여러-개의-테이블을-세로로-결합하기\" style=\"position:relative;\"><a href=\"#021-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%84%B8%EB%A1%9C%EB%A1%9C-%EA%B2%B0%ED%95%A9%ED%95%98%EA%B8%B0\" aria-label=\"021 여러 개의 테이블을 세로로 결합하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02.1 여러 개의 테이블을 세로로 결합하기</h3>\n<ul>\n<li>\n<p>사전 준비</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> app1_mst_users<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> app1_mst_users <span class=\"token punctuation\">(</span>\n  user_id <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> name    <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> email   <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> app1_mst_users\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'U001'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sato'</span>  <span class=\"token punctuation\">,</span> <span class=\"token string\">'sato@example.com'</span>  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'U002'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Suzuki'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suzuki@example.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> app2_mst_users<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> app2_mst_users <span class=\"token punctuation\">(</span>\n  user_id <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> name    <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> phone   <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> app2_mst_users\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'U001'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ito'</span>   <span class=\"token punctuation\">,</span> <span class=\"token string\">'080-xxxx-xxxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'U002'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tanaka'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'070-xxxx-xxxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>실습 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-1 UNION ALL 구문을 사용해 테이블을 세로로 결합하는 쿼리</span>\n<span class=\"token keyword\">select</span> <span class=\"token string\">'app1'</span> <span class=\"token keyword\">as</span> app_name<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> email <span class=\"token keyword\">from</span> app1_mst_users\n<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">select</span> <span class=\"token string\">'app2'</span> <span class=\"token keyword\">as</span> app_name<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">as</span> email <span class=\"token keyword\">from</span> app2_mst_users<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"022-여러-개의-테이블을-가로로-정렬하기\" style=\"position:relative;\"><a href=\"#022-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EA%B0%80%EB%A1%9C%EB%A1%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\" aria-label=\"022 여러 개의 테이블을 가로로 정렬하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02.2 여러 개의 테이블을 가로로 정렬하기</h3>\n<ul>\n<li>\n<p>사전 준비</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> mst_categories<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> mst_categories <span class=\"token punctuation\">(</span>\n  category_id <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">,</span> name        <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> mst_categories\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dvd'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cd'</span>  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> category_sales<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> category_sales <span class=\"token punctuation\">(</span>\n  category_id <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">,</span> sales       <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> category_sales\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">850000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> product_sale_ranking<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> product_sale_ranking <span class=\"token punctuation\">(</span>\n  category_id <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">,</span> rank        <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">,</span> product_id  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> sales       <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> product_sale_ranking\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D002'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D003'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C002'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C003'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>실습 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-2 여러 개의 테이블을 결합해서 가로로 정렬하는 쿼리</span>\n\n<span class=\"token keyword\">select</span> \n\tm<span class=\"token punctuation\">.</span>category_id<span class=\"token punctuation\">,</span>\n\tm<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n\ts<span class=\"token punctuation\">.</span>sales<span class=\"token punctuation\">,</span>\n\tr<span class=\"token punctuation\">.</span>product_id <span class=\"token keyword\">as</span> sale_product\n<span class=\"token keyword\">from</span>\n\tmst_categories <span class=\"token keyword\">as</span> m\n\t<span class=\"token keyword\">join</span>\n\t<span class=\"token comment\">-- 카테고리별로 매출액 결합하기</span>\n\tcategory_sales <span class=\"token keyword\">as</span> s\n\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>category_id <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>category_id\n\t<span class=\"token keyword\">join</span>\n\t<span class=\"token comment\">-- 카테고리별로 상품 결합하기</span>\n\tproduct_sale_ranking <span class=\"token keyword\">as</span> r\n\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>category_id <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>category_id<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>마스터 테이블의 행 수를 변경하지 않고 데이터를 가로 정렬하려면</li>\n<li>LEFT JOIN을 사용해 결합하지 못한 레코드를 유지한 상태로</li>\n<li>결합할 레코드가 반드시 1개 이하가  되게 하는 조건을 사용해야 함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-3 마스터 테이블의 행 수를 변경하기 않고 여러 개의 테이블을 가로로 정렬하는 쿼리</span>\n<span class=\"token keyword\">select</span> \n\tm<span class=\"token punctuation\">.</span>category_id<span class=\"token punctuation\">,</span>\n\tm<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n\ts<span class=\"token punctuation\">.</span>sales<span class=\"token punctuation\">,</span>\n\tr<span class=\"token punctuation\">.</span>product_id <span class=\"token keyword\">as</span> top_sale_product\n<span class=\"token keyword\">from</span>\n\tmst_categories <span class=\"token keyword\">as</span> m \n\t<span class=\"token comment\">-- left join을 사용해서 결합한 레코드를 남기</span>\n\t<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n\t<span class=\"token comment\">-- 카테고리별 매출액 결합하기</span>\n\tcategory_sales <span class=\"token keyword\">as</span> s\n\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>category_id <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>category_id\n\t<span class=\"token comment\">-- left join을 사용해서 결합하지 못한 레코드를 남김</span>\n\t<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n\t<span class=\"token comment\">-- 카테고리별 최고 매출 상품 하나만 추출해서 결합하기</span>\n\tproduct_sale_ranking <span class=\"token keyword\">as</span> r\n\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>category_id <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>category_id\n\t<span class=\"token operator\">and</span> r<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 8-4 상관 서브쿼리로 여러 개의 테이블을 가로로 정렬하는 쿼리</span>\n<span class=\"token keyword\">select</span>\n\tm<span class=\"token punctuation\">.</span>category_id<span class=\"token punctuation\">,</span>\n\tm<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- 상관 서브쿼리를 사용해 카테고리별로 매출액 추출하기</span>\n\t<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">select</span> s<span class=\"token punctuation\">.</span>sales <span class=\"token keyword\">as</span> s\n\t\t<span class=\"token keyword\">from</span> category_sales <span class=\"token keyword\">as</span> s\n\t\t<span class=\"token keyword\">where</span> m<span class=\"token punctuation\">.</span>category_id <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>category_id\n\t<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> sales<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">--  상관 서브쿼리를 사용해 카테고리별로 최고 매출 상품을</span>\n\t<span class=\"token comment\">-- 하나 추출하기(순위로 따로 압축하지 않아도 됨)</span>\n\t<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">select</span> r<span class=\"token punctuation\">.</span>product_id\n\t\t<span class=\"token keyword\">from</span> product_sale_ranking <span class=\"token keyword\">as</span> r\n\t\t<span class=\"token keyword\">where</span> m<span class=\"token punctuation\">.</span>category_id <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>category_id\n\t\t<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sales <span class=\"token keyword\">desc</span>\n\t\t<span class=\"token keyword\">limit</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> top_sale_product\n<span class=\"token keyword\">from</span> \n\tmst_categories <span class=\"token keyword\">as</span> m<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"023-조건-플래그를-0과-1로-표현하기\" style=\"position:relative;\"><a href=\"#023-%EC%A1%B0%EA%B1%B4-%ED%94%8C%EB%9E%98%EA%B7%B8%EB%A5%BC-0%EA%B3%BC-1%EB%A1%9C-%ED%91%9C%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"023 조건 플래그를 0과 1로 표현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02.3 조건 플래그를 0과 1로 표현하기</h3>\n<ul>\n<li>\n<p>사전 준비</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> mst_users_with_card_number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> mst_users_with_card_number <span class=\"token punctuation\">(</span>\n  user_id     <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> card_number <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> mst_users_with_card_number\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'U001'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1234-xxxx-xxxx-xxxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'U002'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span>                 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'U003'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5678-xxxx-xxxx-xxxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> purchase_log<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> purchase_log <span class=\"token punctuation\">(</span>\n  purchase_id <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">,</span> user_id     <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> amount      <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">,</span> stamp       <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> purchase_log\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2017-01-30 10:00:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2017-02-10 10:00:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2017-02-12 10:00:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U002'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2017-03-01 10:00:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10005</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U002'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2017-03-02 10:00:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>실습 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-5 신용카드 등록과 구매 이력 유무를 0과 1이라는 플래그로 나타내는 쿼리</span>\n<span class=\"token keyword\">select</span> \n\tm<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span>\n\tm<span class=\"token punctuation\">.</span>card_number<span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">count</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> purchase_count<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- 신용 카드 번호를 등록한 경우 1, 등록하지 않은 경우 0으로 표현하기</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> m<span class=\"token punctuation\">.</span>card_number <span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> has_card<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">-- 구매 이력이 있는 경우 1, 없는 경우 0으로 표현하기</span>\n\tsign<span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> has_purchased\n<span class=\"token keyword\">from</span>\n\tmst_users_with_card_number <span class=\"token keyword\">as</span> m\n\t<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> \n\t\tpurchase_log <span class=\"token keyword\">as</span> p \n\t\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>user_id\n\t<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> m<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>card_number<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"024-계산한-테이블에-이름-붙여-재사용하기\" style=\"position:relative;\"><a href=\"#024-%EA%B3%84%EC%82%B0%ED%95%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90-%EC%9D%B4%EB%A6%84-%EB%B6%99%EC%97%AC-%EC%9E%AC%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"024 계산한 테이블에 이름 붙여 재사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02.4 계산한 테이블에 이름 붙여 재사용하기</h3>\n<ul>\n<li>\n<p>사전 준비</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> product_sales<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> product_sales <span class=\"token punctuation\">(</span>\n  category_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> product_id    <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> sales         <span class=\"token keyword\">integer</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> product_sales\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'dvd'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'D001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'dvd'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'D002'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'dvd'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'D003'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'cd'</span>  <span class=\"token punctuation\">,</span> <span class=\"token string\">'C001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'cd'</span>  <span class=\"token punctuation\">,</span> <span class=\"token string\">'C002'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'cd'</span>  <span class=\"token punctuation\">,</span> <span class=\"token string\">'C003'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B002'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B003'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B004'</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>실습 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-6 카테고리별 순위를 추가한 테이블에 이름 붙이기</span>\n<span class=\"token keyword\">with</span>\nproduct_sale_ranking <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">select</span>\n\t\tcategory_name<span class=\"token punctuation\">,</span>\n\t\tproduct_id<span class=\"token punctuation\">,</span>\n\t\tsales<span class=\"token punctuation\">,</span>\n\t\trow_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> category_name <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sales <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rank\n\t<span class=\"token keyword\">from</span>\n\t\tproduct_sales\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> product_sale_ranking<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-7 카테고리들의 순위에서 유니크한 순위 목록을 계산하는 쿼리</span>\n<span class=\"token keyword\">with</span>\nproduct_sales_ranking <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">select</span>\n\t\tcategory_name<span class=\"token punctuation\">,</span>\n\t\tproduct_id<span class=\"token punctuation\">,</span>\n\t\tsales<span class=\"token punctuation\">,</span>\n\t\trow_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> category_name <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sales <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rank\n\t<span class=\"token keyword\">from</span>\n\t\tproduct_sales\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nmst_rank <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> rank\n\t<span class=\"token keyword\">from</span> product_sale_ranking\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mst_rank<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-8 카테고리들의 순위를 횡단적으로 출력하는 쿼리</span>\n<span class=\"token keyword\">with</span>\nproduct_sale_ranking <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">select</span>\n\t\tcategory_name<span class=\"token punctuation\">,</span>\n\t\tproduct_id<span class=\"token punctuation\">,</span>\n\t\tsales<span class=\"token punctuation\">,</span>\n\t\trow_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> category_name <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sales <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rank\n\t<span class=\"token keyword\">from</span>\n\t\tproduct_sales\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nmst_rank <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> rank\n\t<span class=\"token keyword\">from</span> product_sale_ranking\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> \n\tm<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">,</span>\n\tr1<span class=\"token punctuation\">.</span>product_id \t<span class=\"token keyword\">as</span> dvd<span class=\"token punctuation\">,</span>\n\tr1<span class=\"token punctuation\">.</span>sales \t\t<span class=\"token keyword\">as</span> dvd_sales\n\t<span class=\"token punctuation\">,</span>\n\tr2<span class=\"token punctuation\">.</span>product_id\t<span class=\"token keyword\">as</span> cd<span class=\"token punctuation\">,</span>\n\tr2<span class=\"token punctuation\">.</span>sales \t\t<span class=\"token keyword\">as</span> cd_sales<span class=\"token punctuation\">,</span>\n\tr3<span class=\"token punctuation\">.</span>product_id\t<span class=\"token keyword\">as</span> book<span class=\"token punctuation\">,</span>\n\tr3<span class=\"token punctuation\">.</span>sales \t\t<span class=\"token keyword\">as</span> book_sales\n<span class=\"token keyword\">from</span> \n\tmst_rank <span class=\"token keyword\">as</span> m\n\t<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> \n\tproduct_sale_ranking r1\n\t\t\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> r1<span class=\"token punctuation\">.</span>rank\n\t<span class=\"token operator\">and</span> r1<span class=\"token punctuation\">.</span>category_name <span class=\"token operator\">=</span> <span class=\"token string\">'dvd'</span>\n\t<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> \n\t\tproduct_sale_ranking <span class=\"token keyword\">as</span> r2\n\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> r2<span class=\"token punctuation\">.</span>rank\n\t<span class=\"token operator\">and</span> r2<span class=\"token punctuation\">.</span>category_name <span class=\"token operator\">=</span> <span class=\"token string\">'cd'</span>\n\t<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> \n\t\tproduct_sale_ranking <span class=\"token keyword\">as</span> r3\n\t<span class=\"token keyword\">on</span> m<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> r3<span class=\"token punctuation\">.</span>rank\n\t<span class=\"token operator\">and</span> r3<span class=\"token punctuation\">.</span>category_name <span class=\"token operator\">=</span> <span class=\"token string\">'book'</span>\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> m<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"025--유사-테이블-만들기\" style=\"position:relative;\"><a href=\"#025--%EC%9C%A0%EC%82%AC-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"025  유사 테이블 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02.5  유사 테이블 만들기</h3>\n<ul>\n<li>\n<p><strong>임의의 레코드를 가진 유사 테이블 만들기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-9 디바이스 ID와 이름의 마스터 테이블을 만드는 쿼리</span>\n<span class=\"token keyword\">with</span>\nmst_devices <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> device_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'PC'</span> <span class=\"token keyword\">as</span> device_name\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> \t<span class=\"token keyword\">select</span> <span class=\"token number\">2</span> <span class=\"token keyword\">as</span> device_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'SP'</span> <span class=\"token keyword\">as</span> device_name\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> \t<span class=\"token keyword\">select</span> <span class=\"token number\">3</span> <span class=\"token keyword\">as</span> device_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'애플리케이션'</span> <span class=\"token keyword\">as</span> device_name\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mst_devices<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-10 의사 테이블을 사용해 코드를 레이블로 변환하는 쿼리</span>\n<span class=\"token keyword\">with</span>\nmst_devices <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> device_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'PC'</span> <span class=\"token keyword\">as</span> device_name\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> \t<span class=\"token keyword\">select</span> <span class=\"token number\">2</span> <span class=\"token keyword\">as</span> device_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'SP'</span> <span class=\"token keyword\">as</span> device_name\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span> \t<span class=\"token keyword\">select</span> <span class=\"token number\">3</span> <span class=\"token keyword\">as</span> device_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'애플리케이션'</span> <span class=\"token keyword\">as</span> device_name\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> \n\tu<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span>\n\td<span class=\"token punctuation\">.</span>device_name\n<span class=\"token keyword\">from</span>\n\tmst_users <span class=\"token keyword\">as</span> u\n\t<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n\t\tmst_devices <span class=\"token keyword\">as</span> d \n\t<span class=\"token keyword\">on</span> u<span class=\"token punctuation\">.</span>register_device <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>device_id<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>union all의 경우 처리가 비교적 무거우므로 레코드 수가 많아지면 성능 문제가 발생할 수 있음</li>\n</ul>\n</li>\n<li>\n<p><strong>VALUES 구문을 사용한 유사 테이블 만들기</strong></p>\n<ul>\n<li>PostgreSQL에서는 INSERT 구문 이외에도 VALUES구문을 사용해 레코드를 만들 수 있음</li>\n<li>성능적으로 좋을 뿐만 아니라 코드도 굉장히 간단해짐</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-11 VALUES 구문을 사용해 동적으로 테이블 만드는 쿼리</span>\n<span class=\"token keyword\">with</span>\nmst_devices<span class=\"token punctuation\">(</span>device_id<span class=\"token punctuation\">,</span> device_name<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">values</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'애플리케이션'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mst_devices<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>배열형 테이블 함수를 사용한 유사 테이블 만들기</strong></p>\n<ul>\n<li>postgreSQL의 경우 안됨 | hive, sparkSQL만 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-12 배열과 explode 함수를 사용해 동적으로 테이블을 만드는 쿼리</span>\n<span class=\"token keyword\">with</span>\nmst_devices <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">select</span>\n\t\t<span class=\"token comment\">-- 배열을 열로 전개하기</span>\n\t\td<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> device_id\n\t\td<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> device_name\n<span class=\"token keyword\">from</span> \n\t<span class=\"token comment\">-- 배열을 테이블로 전개하기</span>\n\t<span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">select</span> explode<span class=\"token punctuation\">(</span>\n\t\tarray<span class=\"token punctuation\">(</span>\n\t\t\tarray<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tarray<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tarray<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'애플리케이션'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>d\t\n\t<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> t\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mst_devices<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-13 map 자료형과 explode함수를 사용해 통적으로 테이블을 작성하는 쿼리</span>\n<span class=\"token keyword\">with</span>\nmst_devices <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">select</span>\n  \t<span class=\"token comment\">--map 자료형의 데이터를 열로 전개하기</span>\n  \td<span class=\"token punctuation\">[</span><span class=\"token string\">'device_id'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> device_id<span class=\"token punctuation\">,</span>\n  \td<span class=\"token punctuation\">[</span><span class=\"token string\">'device_name'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> device_name\n  <span class=\"token keyword\">from</span>\n  \t<span class=\"token comment\">-- 배열을 테이블로 전개하기</span>\n  <span class=\"token punctuation\">(</span>\n  \t<span class=\"token keyword\">select</span> explode<span class=\"token punctuation\">(</span>\n      \tarray<span class=\"token punctuation\">(</span>\n              map<span class=\"token punctuation\">(</span><span class=\"token string\">'device_id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'device_name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'PC'</span><span class=\"token punctuation\">)</span>\n              map<span class=\"token punctuation\">(</span><span class=\"token string\">'device_id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'device_name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'SP'</span><span class=\"token punctuation\">)</span>\n              map<span class=\"token punctuation\">(</span><span class=\"token string\">'device_id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'device_name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'애플리케이션'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>d\n  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> t\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mst_devices<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>순번을 사용해 테이블 작성하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-14 순번을 가진 유사 테이블 작성하는 쿼리</span>\n<span class=\"token keyword\">with</span>\nseries <span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">-- 1부터 5까지 순번 생성하기</span>\n\t<span class=\"token keyword\">select</span> generate_series<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> idx\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> series<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 8-15 repeat 함수를 응용해서 순번을 작성하는 쿼리 </span>\n<span class=\"token comment\">-- postgreSQL안됨 | hive, sparkSQL만 됨</span>\n<span class=\"token keyword\">select</span> \n\trow_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> idx\n<span class=\"token keyword\">from</span>\n\t<span class=\"token comment\">-- repeat함수와 split 함수를 조합해서 임의의 길이를 가진 배열을 생성하고</span>\n\t<span class=\"token comment\">-- explode로 전개하기</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> explode<span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">(</span><span class=\"token keyword\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> x<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> t<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"데이터분석을 위한 SQL레시피 3일차","date":"July 01, 2022"}}},"pageContext":{"slug":"/DataBase/2022-07-01-데이터분석을-위한-SQL레시피-3일차/","previous":{"fields":{"slug":"/Algorithm/2022-06-30-2021-KAKAO-BLIND-RECRUITMENT-순위검색/"},"frontmatter":{"title":"2021 KAKAO BLIND RECRUITMENT 순위검색"}},"next":{"fields":{"slug":"/Algorithm/2022-07-04-2019카카오-오픈채팅방/"},"frontmatter":{"title":"2019카카오 오픈채팅방"}}}},"staticQueryHashes":["2486386679","3128451518"]}