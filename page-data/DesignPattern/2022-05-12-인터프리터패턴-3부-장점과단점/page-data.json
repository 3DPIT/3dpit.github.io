{"componentChunkName":"component---src-templates-blog-post-js","path":"/DesignPattern/2022-05-12-인터프리터패턴-3부-장점과단점/","result":{"data":{"site":{"siteMetadata":{"title":"3DPIT Study Blog","author":"[KyeongMinPark]","siteUrl":"https://3dpit.github.io","comment":{"disqusShortName":"","utterances":"3dpit/3dpit.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0512e825-6cfd-5822-9192-68faee3e89e2","excerpt":"2022-05-12-인터프리터패턴-3부-장점과단점 목차 01.인터프리터패턴 장단점 01.1 장점 01.2 단점 01.인터피리터패턴 장단점 요청을 캡슐화 하여 호출자(invoker)와 수신자(receiver)를 분리하는 패턴 01.1 장점 자주 등장하는 문제 패턴을 언어와 문법으로 정의할 수 있음 기존 코드를 변경하지 않고 새로운 Expression을 추가할 수 있음 곱을 만들고 싶은 경우 사실 이렇게 만드는 것 보다 인터페이스에 추가하는게 더 쉽긴함 하지만 이렇게 하면 parser…","html":"<h2 id=\"2022-05-12-인터프리터패턴-3부-장점과단점\" style=\"position:relative;\"><a href=\"#2022-05-12-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0%ED%8C%A8%ED%84%B4-3%EB%B6%80-%EC%9E%A5%EC%A0%90%EA%B3%BC%EB%8B%A8%EC%A0%90\" aria-label=\"2022 05 12 인터프리터패턴 3부 장점과단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2022-05-12-인터프리터패턴-3부-장점과단점</h2>\n<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<blockquote>\n<p>01.인터프리터패턴 장단점</p>\n<blockquote>\n<p>01.1 장점</p>\n<p>01.2 단점</p>\n</blockquote>\n</blockquote>\n<h2 id=\"01인터피리터패턴-장단점\" style=\"position:relative;\"><a href=\"#01%EC%9D%B8%ED%84%B0%ED%94%BC%EB%A6%AC%ED%84%B0%ED%8C%A8%ED%84%B4-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"01인터피리터패턴 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01.인터피리터패턴 장단점</h2>\n<ul>\n<li>요청을 캡슐화 하여 호출자(invoker)와 수신자(receiver)를 분리하는 패턴</li>\n</ul>\n<h3 id=\"011-장점\" style=\"position:relative;\"><a href=\"#011-%EC%9E%A5%EC%A0%90\" aria-label=\"011 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01.1 장점</h3>\n<ul>\n<li>자주 등장하는 문제 패턴을 언어와 문법으로 정의할 수 있음</li>\n<li>\n<p>기존 코드를 변경하지 않고 새로운 Expression을 추가할 수 있음</p>\n<ul>\n<li>곱을 만들고 싶은 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiplyExpression</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PostfixExpression</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PostfixExpression</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MultiplyExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PostfixExpression</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PostfixExpression</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>사실 이렇게 만드는 것 보다 인터페이스에 추가하는게 더 쉽긴함</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">static</span> <span class=\"token class-name\">PostfixExpression</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PostfixExpression</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PostfixExpression</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t \t<span class=\"token keyword\">return</span> context <span class=\"token operator\">-></span> left<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>하지만 이렇게 하면 parser는 영향을 받게되어 *를 추가해야하긴함</li>\n<li>추가할때 다른것을 건들지 않고, 확장이 가능하고 단일책임원칙도 지킴</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"012-단점\" style=\"position:relative;\"><a href=\"#012-%EB%8B%A8%EC%A0%90\" aria-label=\"012 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01.2 단점</h3>\n<ul>\n<li>복잡한 문법을 표현하려면 Expression과 Parser가 복잡해짐</li>\n</ul>","frontmatter":{"title":"인터프리터패턴 3부 장점과단점","date":"May 12, 2022"}}},"pageContext":{"slug":"/DesignPattern/2022-05-12-인터프리터패턴-3부-장점과단점/","previous":{"fields":{"slug":"/DesignPattern/2022-05-12-인터프리터패턴-2부-패턴적용하기/"},"frontmatter":{"title":"인터프리터패턴 2부 패턴적용하기"}},"next":{"fields":{"slug":"/Java/2022-05-15-쓰레드와동기화/"},"frontmatter":{"title":"쓰레드와동기화"}}}},"staticQueryHashes":["2486386679","3128451518"]}